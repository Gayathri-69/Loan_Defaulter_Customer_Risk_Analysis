-----------------------------------CLEANING CUSTOMERS TABLE--------------------------------------
CREATE OR REPLACE TABLE BANKDATA.REFINED.REFINED_BANK_CUSTOMERS AS
SELECT
    TRY_CAST("CUSTOMER_ID" AS VARCHAR(10)) AS "CUSTOMER_ID",
    INITCAP(TRY_CAST("FIRST_NAME" AS VARCHAR(20))) AS "FIRST_NAME",
    INITCAP(TRY_CAST("LAST_NAME" AS VARCHAR(20))) AS "LAST_NAME",
    TRY_CAST(REGEXP_REPLACE("PHONE_NUMBER", '[^0-9]', '') AS NUMBER(10, 0)) AS "PHONE_NUMBER",
    LOWER(TRIM(TRY_CAST("EMAIL" AS VARCHAR(40)))) AS "EMAIL",
    TRY_CAST("AGE" AS INT) AS "AGE",
    UPPER(TRIM(TRY_CAST("GENDER" AS VARCHAR(10)))) AS "GENDER",
    INITCAP(TRIM(TRY_CAST("MARITAL_STATUS" AS VARCHAR(15)))) AS "MARITAL_STATUS",
    INITCAP(TRIM(TRY_CAST("EMPLOYMENT_STATUS" AS VARCHAR(20)))) AS "EMPLOYMENT_STATUS",
    INITCAP(TRIM(TRY_CAST("ADDRESS" AS VARCHAR(50)))) AS "ADDRESS",

    -- Clean and convert income
    ABS(TRY_CAST(REPLACE(REGEXP_REPLACE("INCOME(MONTH)", '[^0-9\.]', ''), ',', '') AS FLOAT)) AS "INCOME(MONTH)",

    -- Cap CIBIL score at 900
    LEAST(900, TRY_CAST("CIBIL_SCORE" AS INT)) AS "CIBIL_SCORE",

    UPPER(TRIM(TRY_CAST("PAN_NUMBER" AS VARCHAR(10)))) AS "PAN_NUMBER",
    TRY_CAST("ACCOUNT_NUMBER" AS STRING) AS "ACCOUNT_NUMBER",
    TRY_CAST("NUMBER_OF_DEPENDENTS" AS INT) AS "NUMBER_OF_DEPENDENTS"

FROM BANKDATA.RAW.RAW_BANK_CUSTOMERS;


SELECT * FROM BANKDATA.REFINED.REFINED_BANK_CUSTOMERS;

-- Masking Policy for Phone Number
CREATE OR REPLACE MASKING POLICY MASK_PHONE_NUMBER AS (val NUMBER)
RETURNS NUMBER ->
  CASE
    WHEN CURRENT_ROLE() = 'ACCOUNTADMIN' THEN val
    ELSE 9999999999
  END;
  
ALTER TABLE BANKDATA.REFINED.REFINED_BANK_CUSTOMERS
MODIFY COLUMN PHONE_NUMBER SET MASKING POLICY MASK_PHONE_NUMBER;

SELECT * FROM BANKDATA.REFINED.REFINED_BANK_CUSTOMERS;


-- Masking Policy for Email: show as ***@gmail.com for others
CREATE OR REPLACE MASKING POLICY MASK_EMAIL AS (val STRING)
RETURNS STRING ->
  CASE
    WHEN CURRENT_ROLE() = 'ACCOUNTADMIN' THEN val
    ELSE '******@gmail.com'
  END;


ALTER TABLE BANKDATA.REFINED.REFINED_BANK_CUSTOMERS
  MODIFY COLUMN EMAIL SET MASKING POLICY MASK_EMAIL; 
  
-- Masking Policy for Account Number

CREATE OR REPLACE MASKING POLICY MASK_ACCOUNT_NUMBER AS (val STRING)
RETURNS STRING ->
  CASE
    WHEN CURRENT_ROLE() = 'ACCOUNTADMIN' THEN val
    ELSE 
      CASE 
        WHEN LENGTH(val) > 4 THEN CONCAT(REPEAT('X', LENGTH(val)-4), RIGHT(val, 4))
        ELSE REPEAT('X', LENGTH(val))
      END
  END;


ALTER TABLE BANKDATA.REFINED.REFINED_BANK_CUSTOMERS
  MODIFY COLUMN ACCOUNT_NUMBER SET MASKING POLICY MASK_PAN_NUMBER;


  
-- Masking Policy for PAN Number
CREATE OR REPLACE MASKING POLICY MASK_PAN_NUMBER AS (val STRING)
RETURNS STRING ->
  CASE
    WHEN CURRENT_ROLE() = 'ACCOUNTADMIN' THEN val
    ELSE 
      CASE 
        WHEN LENGTH(val) > 4 THEN CONCAT(REPEAT('X', LENGTH(val)-4), RIGHT(val, 4))
        ELSE REPEAT('X', LENGTH(val))
      END
  END;


ALTER TABLE BANKDATA.REFINED.REFINED_BANK_CUSTOMERS
  MODIFY COLUMN PAN_Number SET MASKING POLICY MASK_PAN_NUMBER;



-- SYSADMIN gets access but sees only masked data
GRANT USAGE ON DATABASE BANKDATA TO ROLE SYSADMIN;
GRANT USAGE ON SCHEMA BANKDATA.REFINED TO ROLE SYSADMIN;
GRANT USAGE ON WAREHOUSE COMPUTE_WH TO ROLE SYSADMIN;
GRANT SELECT ON TABLE BANKDATA.REFINED.REFINED_BANK_CUSTOMERS TO ROLE SYSADMIN;
use role SYSADMIN;

GRANT USAGE ON DATABASE BANKDATA TO ROLE ORGADMIN;
GRANT USAGE ON SCHEMA BANKDATA.REFINED TO ROLE ORGADMIN;
GRANT USAGE ON WAREHOUSE COMPUTE_WH TO ROLE ORGADMIN;
GRANT SELECT ON TABLE BANKDATA.REFINED.REFINED_BANK_CUSTOMERS TO ROLE ORGADMIN;
SELECT * FROM BANKDATA.REFINED.REFINED_BANK_CUSTOMERS;




--------------------------------CLEANING LOANS TABLE--------------------------------------

CREATE OR REPLACE TABLE BANKDATA.REFINED.REFINED_BANK_LOANS AS
WITH cleaned_loans AS (
  SELECT
    TRY_CAST("LOAN_ID" AS VARCHAR(10)) AS "LOAN_ID",
    TRY_CAST("CUSTOMER_ID" AS VARCHAR(10)) AS "CUSTOMER_ID",
    TRY_CAST(REPLACE(REGEXP_REPLACE("LOAN_AMOUNT", '[^0-9\.]', ''), ',', '') AS FLOAT) AS "LOAN_AMOUNT",
    CAST(INITCAP(TRIM("LOAN_TYPE")) AS VARCHAR(20)) AS "LOAN_TYPE",
    TRY_CAST("RATE_OF_INTEREST" AS FLOAT) AS "RATE_OF_INTEREST",
    TRY_CAST("EMI" AS FLOAT) AS "EMI",
    TRY_CAST("TERM_MONTHS" AS INT) AS "TERM_MONTHS",
    CAST(INITCAP(TRIM("LOAN_STATUS")) AS VARCHAR(20)) AS "LOAN_STATUS",
    TRY_TO_DATE("ISSUE_DATE", 'DD-MM-YYYY') AS "ISSUE_DATE",
    ROW_NUMBER() OVER (PARTITION BY "LOAN_ID" ORDER BY TRY_TO_DATE("ISSUE_DATE", 'DD-MM-YYYY') DESC) AS rn
  FROM BANKDATA.RAW.RAW_BANK_LOANS
),
deduplicated_loans AS (
  SELECT *
  FROM cleaned_loans
  WHERE rn = 1 AND "LOAN_AMOUNT" IS NOT NULL
),
filled_roi AS (
  SELECT *,
         COALESCE("RATE_OF_INTEREST", AVG("RATE_OF_INTEREST") OVER ()) AS filled_roi
  FROM deduplicated_loans
),
calculated_emi AS (
  SELECT 
    "LOAN_ID",
    "CUSTOMER_ID",
    "LOAN_AMOUNT",
    "LOAN_TYPE",
    filled_roi AS "RATE_OF_INTEREST",
    CASE 
      WHEN "TERM_MONTHS" IS NOT NULL AND filled_roi IS NOT NULL THEN 
        ROUND(
          ("LOAN_AMOUNT" * (filled_roi / 12 / 100) * POWER(1 + (filled_roi / 12 / 100), "TERM_MONTHS")) /
          (POWER(1 + (filled_roi / 12 / 100), "TERM_MONTHS") - 1), 
          2
        )
      ELSE "EMI"
    END AS "EMI",
    "TERM_MONTHS",
    "LOAN_STATUS",
    "ISSUE_DATE"
  FROM filled_roi
)
SELECT *
FROM calculated_emi;

ALTER TABLE BANKDATA.REFINED.REFINED_BANK_LOANS
ALTER COLUMN ISSUE_DATE SET DATA TYPE DATETIME;

-- Step 1: Add a new column with TIMESTAMP_NTZ(9) type
ALTER TABLE BANKDATA.REFINED.REFINED_BANK_LOANS ADD COLUMN ISSUE_DATE_NEW TIMESTAMP_NTZ(9);

-- Step 2: Copy existing DATE values into the new TIMESTAMP column
UPDATE BANKDATA.REFINED.REFINED_BANK_LOANS
SET ISSUE_DATE_NEW = TO_TIMESTAMP_NTZ(ISSUE_DATE);

-- Step 3: Drop the old DATE column and rename the new one
ALTER TABLE BANKDATA.REFINED.REFINED_BANK_LOANS DROP COLUMN ISSUE_DATE;
ALTER TABLE BANKDATA.REFINED.REFINED_BANK_LOANS RENAME COLUMN ISSUE_DATE_NEW TO ISSUE_DATE;




SELECT * FROM BANKDATA.REFINED.REFINED_BANK_LOANS;
----------------------------------------PAYMENTS--------------------------
CREATE OR REPLACE TABLE BANKDATA.REFINED.REFINED_BANK_PAYMENTS AS
WITH cleaned_payments AS (
    SELECT
        TRY_CAST("PAYMENT_ID" AS VARCHAR(10)) AS "PAYMENT_ID",
        TRY_CAST("LOAN_ID" AS VARCHAR(10)) AS "LOAN_ID",
        TRY_TO_DATE(TRIM("DUE_DATE"), 'DD-MM-YYYY') AS "DUE_DATE",
        TRY_TO_DATE(TRIM("PAID_DATE"), 'DD-MM-YYYY') AS "PAID_DATE",
        TRY_CAST(REPLACE(REGEXP_REPLACE("AMOUNT_PAID", '[^0-9\.]', ''), ',', '') AS FLOAT) AS "AMOUNT_PAID",
        CAST(INITCAP(TRIM("STATUS")) AS VARCHAR(20)) AS "STATUS",
        ROW_NUMBER() OVER (PARTITION BY "PAYMENT_ID" ORDER BY TRY_TO_DATE(TRIM("PAID_DATE"), 'DD-MM-YYYY') DESC) AS rn
    FROM BANKDATA.RAW.RAW_BANK_PAYMENTS
),
deduplicated_payments AS (
    SELECT *
    FROM cleaned_payments
    WHERE rn = 1
)
SELECT 
    "PAYMENT_ID",
    "LOAN_ID",
    "DUE_DATE",
    "PAID_DATE",
    "AMOUNT_PAID",
    "STATUS"
FROM deduplicated_payments
WHERE "AMOUNT_PAID" IS NOT NULL;



SELECT COUNT(*) FROM BANKDATA.REFINED.REFINED_BANK_PAYMENTS;

-------------------------------------------ASSETS-----------------------------------
CREATE OR REPLACE TABLE BANKDATA.REFINED.REFINED_BANK_CUSTOMER_ASSETS AS
WITH cleaned_assets AS (
    SELECT
        TRY_CAST("ASSET_ID" AS VARCHAR(10)) AS ASSET_ID,
        TRY_CAST("CUSTOMER_ID" AS VARCHAR(10)) AS CUSTOMER_ID,
        CAST(INITCAP(TRIM("ASSET_NAME")) AS VARCHAR(20)) AS ASSET_NAME,
        TRY_CAST(REPLACE(REGEXP_REPLACE("ASSET_WORTH", '[^0-9\.]', ''), ',', '') AS FLOAT) AS ASSET_WORTH,
        ROW_NUMBER() OVER (PARTITION BY "ASSET_ID" ORDER BY "CUSTOMER_ID" DESC) AS rn
    FROM BANKDATA.RAW.RAW_BANK_CUSTOMER_ASSETS
),
deduplicated_assets AS (
    SELECT *
    FROM cleaned_assets
    WHERE rn = 1
),
final_assets AS (
    SELECT
        ASSET_ID,
        CUSTOMER_ID,
        ASSET_NAME,
        COALESCE(
            ASSET_WORTH,
            AVG(ASSET_WORTH) OVER (PARTITION BY ASSET_NAME)
        ) AS ASSET_WORTH
    FROM deduplicated_assets
)
SELECT *
FROM final_assets;




SELECT * FROM BANKDATA.REFINED.REFINED_BANK_CUSTOMER_ASSETS;


---------------------------CHECKING FOR MISSING VALUES ----------------------
SELECT
  COUNT_IF(CUSTOMER_ID IS NULL) AS MISSING_CUSTOMER_ID,
  COUNT_IF(FIRST_NAME IS NULL) AS MISSING_FIRST_NAME,
  COUNT_IF(LAST_NAME IS NULL) AS MISSING_LAST_NAME,
  COUNT_IF(PHONE_NUMBER IS NULL) AS MISSING_PHONE_NUMBER,
  COUNT_IF(EMAIL IS NULL) AS MISSING_EMAIL,
  COUNT_IF(AGE IS NULL) AS MISSING_AGE,
  COUNT_IF(GENDER IS NULL) AS MISSING_GENDER,
  COUNT_IF(MARITAL_STATUS IS NULL) AS MISSING_MARITAL_STATUS,
  COUNT_IF("INCOME(MONTH)" IS NULL) AS MISSING_INCOME,
  COUNT_IF(CIBIL_SCORE IS NULL) AS MISSING_CIBIL_SCORE,
  COUNT_IF(ACCOUNT_NUMBER IS NULL) AS MISSING_ACCOUNT_NUMBER,
  COUNT_IF(EMPLOYMENT_STATUS IS NULL) AS MISSING_EMPLOYMENT_STATUS,
  COUNT_IF(NUMBER_OF_DEPENDENTS IS NULL) AS MISSING_NUMBER_OF_DEPENDENTS,
  COUNT_IF(ADDRESS IS NULL) AS MISSING_ADDRESS,
  COUNT_IF(PAN_NUMBER IS NULL) AS MISSING_PAN_NUMBER
FROM BANKDATA.REFINED.REFINED_BANK_CUSTOMERS;

UPDATE BANKDATA.REFINED.REFINED_BANK_CUSTOMERS
SET EMPLOYMENT_STATUS = CASE
    WHEN EMPLOYMENT_STATUS IS NOT NULL THEN EMPLOYMENT_STATUS
    WHEN AGE < 18 THEN 'Student'
    WHEN COALESCE("INCOME(MONTH)", 0) = 0 THEN 'Unemployed'
    ELSE 'Unknown'
END
WHERE EMPLOYMENT_STATUS IS NULL;






-- Example: Update missing emails
UPDATE BANKDATA.REFINED.REFINED_BANK_CUSTOMERS
SET Email = LOWER(CONCAT(First_Name, '.', Last_Name, '@gmail.com'))
WHERE Email IS NULL OR TRIM(Email) = '';


--------------------LOANS MISSING---------------
SELECT
  COUNT_IF(LOAN_ID IS NULL) AS Missing_Loan_ID,
  COUNT_IF(LOAN_AMOUNT IS NULL) AS Missing_Loan_Amount,
  COUNT_IF(LOAN_TYPE IS NULL) AS Missing_Loan_Type,
  COUNT_IF(RATE_OF_INTEREST IS NULL) AS Missing_Rate_Of_Interest,
  COUNT_IF(EMI IS NULL) AS Missing_EMI,
  COUNT_IF(TERM_MONTHS IS NULL) AS Missing_Term_Months,
  COUNT_IF(LOAN_STATUS IS NULL) AS Missing_Loan_Status,
  COUNT_IF(ISSUE_DATE IS NULL) AS Missing_Issue_Date
FROM BANKDATA.REFINED.REFINED_BANK_LOANS;

select * from BANKDATA.REFINED.REFINED_BANK_LOANS;


--- CHECKING MISSING VALUES IN ASSETS
SELECT
  COUNT_IF(ASSET_ID IS NULL) AS Missing_Asset_ID,
  COUNT_IF(ASSET_WORTH IS NULL) AS Missing_Asset_Worth,
  COUNT_IF(CUSTOMER_ID IS NULL) AS Missing_Customer_ID,
  COUNT_IF(ASSET_NAME IS NULL) AS MISSING_ASSET_NAME
FROM BANKDATA.REFINED.REFINED_BANK_CUSTOMER_ASSETS;


--- CHECKING MISSING VALUES IN PAYMENTS
SELECT
  COUNT_IF(PAYMENT_ID IS NULL) AS Missing_Payment_ID,
  COUNT_IF(LOAN_ID IS NULL) AS Missing_Loan_ID,
  COUNT_IF(DUE_DATE IS NULL) AS Missing_due_date,
  COUNT_IF(PAID_DATE IS NULL) AS Missing_Pay_Date,
  COUNT_IF(AMOUNT_PAID IS NULL) AS Missing_Amount_Paid,
  COUNT_IF(STATUS IS NULL) AS Missing_Status
FROM BANKDATA.REFINED.REFINED_BANK_PAYMENTS;



-------------------------HANDLING SCD TYPE 1-------------
CREATE OR REPLACE STREAM BANKDATA.REFINED.BANK_CUSTOMERS_CLEANED_STAGING_STREAM
ON TABLE BANKDATA.REFINED.REFINED_BANK_CUSTOMERS
SHOW_INITIAL_ROWS = FALSE;

CREATE OR REPLACE TASK BANKDATA.REFINED.MERGE_CUSTOMERS_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '5 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('BANKDATA.REFINED.BANK_CUSTOMERS_CLEANED_STAGING_STREAM')
AS
MERGE INTO BANKDATA.REFINED.REFINED_BANK_CUSTOMERS AS TARGET
USING (
    SELECT * FROM BANKDATA.REFINED.BANK_CUSTOMERS_CLEANED_STAGING_STREAM
) AS SOURCE
ON TARGET.CUSTOMER_ID = SOURCE.CUSTOMER_ID

WHEN MATCHED AND (
    TARGET.FIRST_NAME IS DISTINCT FROM SOURCE.FIRST_NAME OR
    TARGET.LAST_NAME IS DISTINCT FROM SOURCE.LAST_NAME OR
    TARGET.PHONE_NUMBER IS DISTINCT FROM SOURCE.PHONE_NUMBER OR
    TARGET.EMAIL IS DISTINCT FROM SOURCE.EMAIL OR
    TARGET.AGE IS DISTINCT FROM SOURCE.AGE OR
    TARGET.GENDER IS DISTINCT FROM SOURCE.GENDER OR
    TARGET.MARITAL_STATUS IS DISTINCT FROM SOURCE.MARITAL_STATUS OR
    TARGET.ADDRESS IS DISTINCT FROM SOURCE.ADDRESS OR
    TARGET."INCOME(MONTH)" IS DISTINCT FROM SOURCE.INCOME OR
    TARGET.CIBIL_SCORE IS DISTINCT FROM SOURCE.CIBIL_SCORE OR
    TARGET.ACCOUNT_NUMBER IS DISTINCT FROM SOURCE.ACCOUNT_NUMBER OR
    TARGET.PAN_NUMBER IS DISTINCT FROM SOURCE.PAN_NUMBER OR
    TARGET.EMPLOYMENT_STATUS IS DISTINCT FROM SOURCE.EMPLOYMENT_STATUS OR
    TARGET.NUMBER_OF_DEPENDENTS IS DISTINCT FROM SOURCE.NUMBER_OF_DEPENDENTS
)
THEN UPDATE SET
    FIRST_NAME = SOURCE.FIRST_NAME,
    LAST_NAME = SOURCE.LAST_NAME,
    PHONE_NUMBER = SOURCE.PHONE_NUMBER,
    EMAIL = SOURCE.EMAIL,
    AGE = SOURCE.AGE,
    GENDER = SOURCE.GENDER,
    MARITAL_STATUS = SOURCE.MARITAL_STATUS,
    ADDRESS = SOURCE.ADDRESS,
    "INCOME(MONTH)" = SOURCE."INCOME(MONTH)",
    CIBIL_SCORE = SOURCE.CIBIL_SCORE,
    ACCOUNT_NUMBER = SOURCE.ACCOUNT_NUMBER,
    PAN_NUMBER = SOURCE.PAN_NUMBER,
    EMPLOYMENT_STATUS = SOURCE.EMPLOYMENT_STATUS,
    NUMBER_OF_DEPENDENTS = SOURCE.NUMBER_OF_DEPENDENTS,
    LAST_UPDATED_AT = CURRENT_TIMESTAMP()

WHEN NOT MATCHED THEN
INSERT (
    CUSTOMER_ID,
    FIRST_NAME,
    LAST_NAME,
    PHONE_NUMBER,
    EMAIL,
    AGE,
    GENDER,
    MARITAL_STATUS,
    ADDRESS,
    "INCOME(MONTH)",
    CIBIL_SCORE,
    ACCOUNT_NUMBER,
    PAN_NUMBER,
    EMPLOYMENT_STATUS,
    NUMBER_OF_DEPENDENTS,
    LAST_UPDATED_AT
)
VALUES (
    SOURCE.CUSTOMER_ID,
    SOURCE.FIRST_NAME,
    SOURCE.LAST_NAME,
    SOURCE.PHONE_NUMBER,
    SOURCE.EMAIL,
    SOURCE.AGE,
    SOURCE.GENDER,
    SOURCE.MARITAL_STATUS,
    SOURCE.ADDRESS,
    SOURCE."INCOME(MONTH)",
    SOURCE.CIBIL_SCORE,
    SOURCE.ACCOUNT_NUMBER,
    SOURCE.PAN_NUMBER,
    SOURCE.EMPLOYMENT_STATUS,
    SOURCE.NUMBER_OF_DEPENDENTS,
    CURRENT_TIMESTAMP()
);

-- TESTING WHETHER SCD IS WORKING OR NOT
INSERT INTO BANKDATA.REFINED.REFINED_BANK_CUSTOMERS (
    CUSTOMER_ID,
    FIRST_NAME,
    LAST_NAME,
    PHONE_NUMBER,
    EMAIL,
    AGE,
    GENDER,
    MARITAL_STATUS,
    ADDRESS,
    EMPLOYMENT_STATUS,
    "INCOME(MONTH)",
    PAN_NUMBER,
    ACCOUNT_NUMBER,
    CIBIL_SCORE,
    NUMBER_OF_DEPENDENTS
)
VALUES (
    'CUST0009',
    'RAVI',
    'KUMAR',
    '9876543210',
    'RAVI.KUMAR@EXAMPLE.COM',
    35,
    'MALE',
    'MARRIED',
    'YOSUFGUDA',
    'EMPLOYED',
    7500000,
    'AAAAY1234U',
    123456789012,
    689,
    2
);

UPDATE BANKDATA.REFINED.REFINED_BANK_CUSTOMERS
SET
    FIRST_NAME = 'RAHUL',
    EMAIL = 'RAHUL.SHARMA@NEWMAIL.COM'
WHERE CUSTOMER_ID = 'CUST0009';

-- DELETE FROM BANKDATA.SILVER.CUSTOMERS_CLEANED WHERE ACCOUNT_NUMBER = 123456789012;

SELECT * FROM BANKDATA.REFINED.BANK_CUSTOMERS_CLEANED_STAGING_STREAM;

SELECT COUNT(*) FROM BANKDATA.REFINED.REFINED_BANK_CUSTOMERS;

UPDATE BANKDATA.REFINED.REFINED_BANK_CUSTOMERS SET CIBIL_SCORE = 789 WHERE CUSTOMER_ID = 'CUST10763';

----------------LOANS-------------------------

CREATE OR REPLACE STREAM BANKDATA.REFINED.BANK_LOANS_CLEANED_STAGING_STREAM
ON TABLE BANKDATA.REFINED.REFINED_BANK_LOANS
SHOW_INITIAL_ROWS = FALSE;

CREATE OR REPLACE TASK BANKDATA.REFINED.MERGE_LOANS_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '5 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('BANKDATA.REFINED.BANK_LOANS_CLEANED_STAGING_STREAM')
AS
MERGE INTO BANKDATA.REFINED.REFINED_BANK_LOANS AS TARGET
USING (
    SELECT * FROM BANKDATA.REFINED.BANK_LOANS_CLEANED_STAGING_STREAM
) AS SOURCE
ON TARGET.LOAN_ID = SOURCE.LOAN_ID

WHEN MATCHED AND (
    TARGET.CUSTOMER_ID IS DISTINCT FROM SOURCE.CUSTOMER_ID OR
    TARGET.LOAN_AMOUNT IS DISTINCT FROM SOURCE.LOAN_AMOUNT OR
    TARGET.LOAN_TYPE IS DISTINCT FROM SOURCE.LOAN_TYPE OR
    TARGET.RATE_OF_INTEREST IS DISTINCT FROM SOURCE.RATE_OF_INTEREST OR
    TARGET.EMI IS DISTINCT FROM SOURCE.EMI OR
    TARGET.TERM_MONTHS IS DISTINCT FROM SOURCE.TERM_MONTHS OR
    TARGET.LOAN_STATUS IS DISTINCT FROM SOURCE.LOAN_STATUS OR
    TARGET.ISSUE_DATE IS DISTINCT FROM SOURCE.ISSUE_DATE
)
THEN UPDATE SET
    CUSTOMER_ID = SOURCE.CUSTOMER_ID,
    LOAN_AMOUNT = SOURCE.LOAN_AMOUNT,
    LOAN_TYPE = SOURCE.LOAN_TYPE,
    RATE_OF_INTEREST = SOURCE.RATE_OF_INTEREST,
    EMI = SOURCE.EMI,
    TERM_MONTHS = SOURCE.TERM_MONTHS,
    LOAN_STATUS = SOURCE.LOAN_STATUS,
    ISSUE_DATE = SOURCE.ISSUE_DATE,
    LAST_UPDATED_AT = CURRENT_TIMESTAMP()

WHEN NOT MATCHED THEN
INSERT (
    LOAN_ID,
    CUSTOMER_ID,
    LOAN_AMOUNT,
    LOAN_TYPE,
    RATE_OF_INTEREST,
    EMI,
    TERM_MONTHS,
    LOAN_STATUS,
    ISSUE_DATE,
    LAST_UPDATED_AT
)
VALUES (
    SOURCE.LOAN_ID,
    SOURCE.CUSTOMER_ID,
    SOURCE.LOAN_AMOUNT,
    SOURCE.LOAN_TYPE,
    SOURCE.RATE_OF_INTEREST,
    SOURCE.EMI,
    SOURCE.TERM_MONTHS,
    SOURCE.LOAN_STATUS,
    SOURCE.ISSUE_DATE,
    CURRENT_TIMESTAMP()
);

INSERT INTO BANKDATA.REFINED.REFINED_BANK_LOANS (
    LOAN_ID, CUSTOMER_ID, LOAN_AMOUNT, LOAN_TYPE, RATE_OF_INTEREST, EMI,
    TERM_MONTHS, LOAN_STATUS, ISSUE_DATE
)
VALUES (
    'LOAN001', 'CUST001', 250000, 'PERSONAL', 11.5, 5500,
    60, 'ONGOING', '2023-01-15'
);

SELECT * FROM BANKDATA.REFINED.BANK_LOANS_CLEANED_STAGING_STREAM;

SELECT COUNT(*) FROM BANKDATA.REFINED.REFINED_BANK_LOANS;

-------------------------------ASSETS-----------------

CREATE OR REPLACE STREAM BANKDATA.REFINED.BANK_CUSTOMER_ASSETS_CLEANED_STAGING_STREAM
ON TABLE BANKDATA.REFINED.REFINED_BANK_CUSTOMER_ASSETS
SHOW_INITIAL_ROWS = FALSE;

CREATE OR REPLACE TASK BANKDATA.REFINED.MERGE_ASSETS_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '5 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('BANKDATA.REFINED.BANK_CUSTOMER_ASSETS_CLEANED_STAGING_STREAM')
AS
MERGE INTO BANKDATA.REFINED.BANK_CUSTOMER_ASSETS_CLEANED AS TARGET
USING (
    SELECT * FROM BANKDATA.REFINED.BANK_CUSTOMER_ASSETS_CLEANED_STAGING_STREAM
) AS SOURCE
ON TARGET.ASSET_ID = SOURCE.ASSET_ID

WHEN MATCHED AND (
    TARGET.CUSTOMER_ID IS DISTINCT FROM SOURCE.CUSTOMER_ID OR
    TARGET.ASSET_NAME IS DISTINCT FROM SOURCE.ASSET_NAME OR
    TARGET.ASSET_WORTH IS DISTINCT FROM SOURCE.ASSET_WORTH
)
THEN UPDATE SET
    CUSTOMER_ID = SOURCE.CUSTOMER_ID,
    ASSET_NAME = SOURCE.ASSET_NAME,
    ASSET_WORTH = SOURCE.ASSET_WORTH,
    LAST_UPDATED_AT = CURRENT_TIMESTAMP()

WHEN NOT MATCHED THEN
INSERT (
    ASSET_ID,
    CUSTOMER_ID,
    ASSET_NAME,
    ASSET_WORTH,
    LAST_UPDATED_AT
)
VALUES (
    SOURCE.ASSET_ID,
    SOURCE.CUSTOMER_ID,
    SOURCE.ASSET_NAME,
    SOURCE.ASSET_WORTH,
    CURRENT_TIMESTAMP()
);

INSERT INTO BANKDATA.REFINED.REFINED_BANK_CUSTOMER_ASSETS (
    ASSET_ID, CUSTOMER_ID, ASSET_NAME, ASSET_WORTH
)
VALUES (
    'AST001', 'CUST001', 'CAR', 600000
);

SELECT * FROM BANKDATA.REFINED.BANK_CUSTOMER_ASSETS_CLEANED_STAGING_STREAM;

SELECT COUNT(*) FROM BANKDATA.REFINED.REFINED_BANK_CUSTOMER_ASSETS;

-------------------PAYMENTS----------------

CREATE OR REPLACE STREAM BANKDATA.REFINED.BANK_PAYMENTS_CLEANED_STAGING_STREAM
ON TABLE BANKDATA.REFINED.REFINED_BANK_PAYMENTS
SHOW_INITIAL_ROWS = FALSE;

CREATE OR REPLACE TASK BANKDATA.REFINED.MERGE_PAYMENTS_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '5 MINUTE'
WHEN SYSTEM$STREAM_HAS_DATA('BANKDATA.REFINED.BANK_PAYMENTS_CLEANED_STAGING_STREAM')
AS
MERGE INTO BANKDATA.REFINED.REFINED_BANK_PAYMENTS AS TARGET
USING (
    SELECT * FROM BANKDATA.REFINED.BANK_PAYMENTS_CLEANED_STAGING_STREAM
) AS SOURCE
ON TARGET.PAYMENT_ID = SOURCE.PAYMENT_ID

WHEN MATCHED AND (
    TARGET.LOAN_ID IS DISTINCT FROM SOURCE.LOAN_ID OR
    TARGET.PAID_DATE IS DISTINCT FROM SOURCE.PAID_DATE OR
    TARGET.AMOUNT_PAID IS DISTINCT FROM SOURCE.AMOUNT_PAID OR
    TARGET.STATUS IS DISTINCT FROM SOURCE.STATUS
)
THEN UPDATE SET
    LOAN_ID = SOURCE.LOAN_ID,
    PAID_DATE = SOURCE.PAID_DATE,
    AMOUNT_PAID = SOURCE.AMOUNT_PAID,
    STATUS = SOURCE.STATUS,
    LAST_UPDATED_AT = CURRENT_TIMESTAMP()

WHEN NOT MATCHED THEN
INSERT (
    PAYMENT_ID,
    LOAN_ID,
    PAID_DATE,
    AMOUNT_PAID,
    STATUS,
    LAST_UPDATED_AT
)
VALUES (
    SOURCE.PAYMENT_ID,
    SOURCE.LOAN_ID,
    SOURCE.PAID_DATE,
    SOURCE.AMOUNT_PAID,
    SOURCE.STATUS,
    CURRENT_TIMESTAMP()
);

INSERT INTO BANKDATA.REFINED.REFINED_BANK_PAYMENTS (
    PAYMENT_ID, LOAN_ID, DUE_DATE,PAID_DATE, AMOUNT_PAID, STATUS
)
VALUES (
    'PAY001', 'LOAN001','2024-11-03' ,'2024-12-01', 5500, 'ONTIME'
);

SELECT * FROM BANKDATA.REFINED.BANK_PAYMENTS_CLEANED_STAGING_STREAM;

SELECT COUNT(*) FROM BANKDATA.REFINED.REFINED_BANK_PAYMENTS;


